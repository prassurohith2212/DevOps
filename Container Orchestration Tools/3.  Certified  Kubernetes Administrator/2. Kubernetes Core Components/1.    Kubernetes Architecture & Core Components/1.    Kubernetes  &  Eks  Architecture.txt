1. EKS Architecture:
=======================

1. Kubernetes Intro:
=======================

1. Kubernetes is a portable, extensible, open-source platform for managing Containerized WorkLoads.
2. So many advanced features are available like below:
  - Service discovery and Load Balancing.
  - Storage Orchestration.
  - Automated rollouts and rollbacks.
  - Automatic bin packing.
  - Self-Healing.
  - Secret and Configuration Management.
  
3. We can manage Kubernetes using Two Ways:

1. Imperative Way.
2. Declarative Way.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


2. Kubernetes Components:
===========================
- Kubernetes Cluster Contains below.

1. Master Nodes.
2. Worker Nodes.

1. Master Nodes Components:
===============================

1.1.Container Runtime Engine:
-------------------------------
- CRE is just like an environment to run containers.
- Example: Docker



1.2. Kube-Apiserver:
----------------------
- It acts as front end for the kubernetes control plane.
- It exposes the kubernetes API.
- CLItools (like kubectl), Users and even Master Components (Scheduler, Controller Manager, etcd) and Worker Node 
  Components like (kubelet) everything talk with API Server.


  
1.3. Etcd Database:
---------------------
- Consistent and highly-available key value store used as kubernetes' backing store for all cluster data.
- It stores all the masters and worker node information.




1.4. Kube-Scheduler:
---------------------
- Scheduler is responsible for distributing containers across multiple nodes.
- It watches for newly created Pods with no assigned node, and selects a node for them to run on.




1.5. Kube-Controller-Manager:
-----------------------------
- Controllers are responsible for noticing and responding when nodes, containers or endpoints go down.
- They make decisions to bring up new containers in such cases.

Node Controller: Responsible for maintaining the correct object in the system.

Replication Controller:  Responsible for maintaining the correct number of pods for every replication controller object in the system.

Endpoints Controller: Populates the Endpoints object ( That is, joins Services & Pods )

Service Account & Token Controller:  Creates default accounts and API Access for New NameSpaces.




1.6. Cloud-Controller-Manager:
---------------------------------
. A Kubernetes control plane component that embeds cloud-specific control logic.
. It only runs controllers that are specific to your cloud provider.
. On-Premise Kubernetes clusters will not have this component.
. Node Controller: For checking the cloud provider to determine if a node has been deleted in the cloud after it stops responding.
. Route Controller: For setting up routes in the underlying cloud infrastructure.
. Service Controller: For Creating, Updating and deleting cloud provider Load Balancer.





2. Worker Node Components:
=============================
- Where workloads can be deployed.


2.1. Container Runtime :
--------------------------
- CRE is the Underlying Software where we run all these kubernetes components.
- We are using Docker, but we have other runtime options like rkt, Container-d etc.




2.2. Kubelet:
---------------
- Kubelet is the agent that runs on every node in the the cluster.
- This agent is responsible for making sure that containers are running in a pod on a node.




2.3. Kube-Proxy:
------------------
- It is a network proxy that runs on each node in your cluster.
- It maintains network rules on nodes.
- In Short, these network rules allow network communication to your pods from network sessions inside or outside of your cluster.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
